name: Rust Release

on:
  workflow_dispatch:
  push: { tags: ["v*.*.*"] }

permissions: { contents: read }
env: { CARGO_TERM_COLOR: always }
defaults: { run: { shell: bash } }

jobs:
  assemble:
    name: Assemble
    strategy:
      matrix:
        os: [macOS, Ubuntu, Windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Build Package
        run:
          cargo install --path . --root ./target/install --force --no-track
          --locked

      - name: Assemble Archive
        id: assemble
        run: |
          pkg_name_ver=$(cargo metadata --format-version 1 --no-deps | jq --raw-output '.packages[0].name + "-" + .packages[0].version')
          target_triple=$(rustc --version --verbose | sed -e 's/^host: \([A-Za-z0-9_-]*\)$/\1/;t;d')
          archive_basename="${pkg_name_ver}-${target_triple}"

          cd ./target/install/bin
          if [[ "${{ matrix.os }}" == "Windows" ]]; then
            archive_name="${archive_basename}.zip"
            archive_path=$(cygpath --windows --absolute "../${archive_name}")
            7z a "${archive_path}" .
          else
            archive_name="${archive_basename}.tar.gz"
            archive_path=$(realpath "../${archive_name}")
            tar --create --file "${archive_path}" --gzip --verbose -- *
          fi

          echo "archive-name=${archive_name}" >> "${GITHUB_OUTPUT}"
          echo "archive-path=${archive_path}" >> "${GITHUB_OUTPUT}"

      - name: Upload Archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.assemble.outputs.archive-name }}
          path: ${{ steps.assemble.outputs.archive-path }}

  publish:
    name: Publish
    needs: assemble
    permissions: { contents: write }
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all commits, needed for git-cliff

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install git-cliff
        run: cargo install git-cliff

      - name: Download Archives
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Show Archives
        run: find .
        working-directory: artifacts

      - name: Generate Release Notes
        run: git-cliff --latest --strip=all --output=release-notes.md

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          files: artifacts/**/*
