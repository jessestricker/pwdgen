name: Rust Release

on:
  workflow_dispatch:
  push: { tags: ["v*.*.*"] }

permissions: { contents: read }
env: { CARGO_TERM_COLOR: always }
defaults: { run: { shell: bash } }

jobs:
  assemble:
    name: Assemble
    strategy:
      matrix:
        os: [macOS, Ubuntu, Windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install
        run:
          cargo install --path . --root target/install --no-track --locked
          --verbose

      - name: Get Archive Name
        id: get-archive-name
        run: |
          name=$(cargo metadata --no-deps --format-version 1 | jq --raw-output '.packages[].name + "-" + .packages[].version')
          name="${name}-${{ runner.os }}-${{ runner.arch }}"
          name=$(echo "${name}" | awk '{print tolower($0)}')
          echo "result=${name}" >> $GITHUB_OUTPUT

      - name: Create Archive (Windows)
        if: ${{ matrix.os == 'Windows' }}
        run: |
          cd target/install/bin
          7z a "../${{ steps.get-archive-name.outputs.result }}.zip" *

      - name: Create Archive (Posix)
        if: ${{ matrix.os != 'Windows' }}
        run: |
          cd target/install/bin
          tar -c -z -f "../${{ steps.get-archive-name.outputs.result }}.tar.gz" *

      - name: Upload Archive (Windows)
        if: ${{ matrix.os == 'Windows' }}
        uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.get-archive-name.outputs.result }}.zip"
          path:
            "target/install/${{ steps.get-archive-name.outputs.result }}.zip"

      - name: Upload Archive (Posix)
        if: ${{ matrix.os != 'Windows' }}
        uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.get-archive-name.outputs.result }}.tar.gz"
          path:
            "target/install/${{ steps.get-archive-name.outputs.result }}.tar.gz"

  publish:
    name: Publish
    needs: assemble
    permissions: { contents: write }
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install git-cliff
        run: cargo install git-cliff

      - name: Download Archives
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Show Archives
        run: find .
        working-directory: artifacts

      - name: Generate Release Notes
        run: |
          echo 'RELEASE_NOTES<<QLPHHEBORXJEfVzB' >> $GITHUB_ENV
          git-cliff --latest --strip=all >> $GITHUB_ENV
          echo 'QLPHHEBORXJEfVzB' >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ env.RELEASE_NOTES }}
          files: artifacts/**/*
